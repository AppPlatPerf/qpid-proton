------------------------------BUILDING PROTON-C TARGETTING ANDROID ARCHITECTURES------------------------------

The Android NDK is required to build the Proton-C library for Android.
At the time of writing this, the Android NDK can be downloaded at:
https://developer.android.com/tools/sdk/ndk/index.html

These instructions are targetted for people using Linux, but they can also be done on Windows by using Cygwin with the 'make' package.


When the NDK has been successfully downloaded/installed add it to your path.
For example:
export NDK=/usr/jimmy/android-ndk-r9d


To build the Proton-C 0.6 library targetting Android three ndk-build commands will need to be performed.

Open the terminal and navigate to androidopenssl
$NDK/ndk-build

navigate to androiduuid
$NDK/ndk-build

navigate to androidproton
$NDK/ndk-build

This will result in the libraries being built into /chosen/download/path/proton-a/jni/androidproton/libs
Inside the libs folder you will find a folder with the name of the architecture that the build targetted. The default is all architectures.


					---CHANGING TARGET ARCHITECTURES---
There are a number of architectures that you can easily target with ndk-build. For example:
-armeabi
-armeabi-v7a
-x86
-MIPS

To change the architecture that you want to target, (maybe you don't want to wait for openssl to build for every single target :) ,
there are three files called Application.mk in the proton-a directory.
They are located in androidopenssl/jni ; androiduuid/jni ; and androidproton/jni 
Go into the Application.mk file for each one of these folders and change the line that says

APP_ABI := all
to
APP_ABI := armeabi	(NOTE: this example uses armeabi architecture, but you should put the architecture you want to target)

If you want to target a couple architectures you can comma separate them for example APP_ABI := armeabi,armeabi-v7a (for some older versions of ndk-build comma separation isn't allowed)



------------------------------USING THE PROTON-C LIBRARY THAT YOU BUILT FOR ANDROID------------------------------
So a C library was built targetting Android, but in order to call into the library from Android you have to use Java language bindings. This file should be distributed along with two .jar files in the /proton-a/jars folder. You can either use these or build your own by following the instructins in the qpid-proton-0.6 readme. Proton 0.6 includes language bindings into the default build. Reference the proton 0.6 'README' file for information on how to support the production of language bindings in your build. (You basically need to download SWIG)

			--USING INCLUDED JARS TO CALL PROTON-C LIBRARY (using included jars)--
Skip the "BUILD THE DESKTOP VERSION... instructions and go to the "IMPORTING ALL YOUR LIBRARIES..." instructions. Note that the location of proton-api-0.6.jar and proton-jni-0.6.jar are located in proton-a/jars instead of wherever they would be stored during a build.


			--BUILD THE DESKTOP VERSION OF PROTON (proton 0.6) (not using included jars)--
Since language bindings are needed, the first step to using the newly created C library is building the desktop version of proton. This way we have access to language bindings.

Follow the instructions in the README file located in the qpid-proton-0.6 folder. These are complete instructions on building proton.
*Make sure you follow the directions for including the SWIG bindings. It is something simple such as merely downloading SWIG.


After you've finished the last 'make install' command and everything built smoothly, congratulations you're almost there!


			--IMPORTING ALL YOUR LIBRARIES INTO YOUR ANDROID PROJECT--

THIS ASSUMES YOU USE ECLIPSE FOR ANDROID DEVELOPMENT

In the first part of all this, c libraries were built targetting Android architectures.
Recently Java libraries were created.
Now we need to get the c libraries and Java libraries into an Android project and start coding!

Begin by copying the c libraries that you built into the 'libs' folder of your Android project.
The c libraries that you built are located in /chosen/download/path/proton-a/jni/androidproton/libs/
EXAMPLE: cp -R /chosen/download/path/proton-a/jni/androidproton/libs/armeabi/ /usr/jimmy/workspace/[androidproject]/libs/

Now then, to handle the Java libraries you NEED to IMPORT the .jar files into your Android project.
right click on the 'libs' folder of you Android project in the Eclipse IDE and select import.
choose  General -> File System
Then browse for the folder that contains the jars you need to import. This depends on where you decided to have proton build. If you use the command 'cmake -DCMAKE_INSTALL_PREFIX=. ..' then you jars will be located at:
/path/where/you/downloaded/qpid-proton-0.6/build/proton-c/bindings/java (Remember you are selecting the FOLDER that contains the .jar file, not the jar file itself.)
AND
/path/where/you/downloaded/qpid-proton-0.6/build/proton-j/proton-api

Once you select the folder a screen appears where you put a check next to which .jar you want to import and then click finish.
Import proton-jni-0.6.jar	AND	proton-api-0.6.jar

-----------------------------------------------------------------------------------
Now you should be able to code on Android utilizing the Proton-C library via Java language bindings. Neat!!
